{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","addEventListener","terminoBusqueda","forEach","dia","busqueda","categoria_id","e","target","name","value","horaPrevia","classList","remove","Object","values","includes","async","url","resultado","fetch","eventos","listadoHoras","li","add","horasTomadas","map","evento","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","hora","seleccionarHora","obtenerHorasDisponibles","json","buscarEventos","ponentesInput","ponentes","ponentesFiltrados","listadoPonentes","ponenteHidden","seleccionarPonente","ponente","ponentePrevio","ponenteId","respuesta","arrayPonentes","nombre","trim","apellido","id","formatearPonentes","obtenerPonentes","length","expresion","RegExp","toLowerCase","search","firstChild","removeChild","ponenteHTML","createElement","textContent","onclick","appendChild","noResultados","mostrarPonentes","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","tag","etiqueta","ondblclick","eliminarTag","actualizarInputHidden","toString","split","keyCode","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["(function () {\r\n\r\n    const horas = document.querySelector('#horas');\r\n\r\n    if (horas) {\r\n\r\n        const categoria = document.querySelector('[name = \"categoria_id\"]');\r\n        const dias = document.querySelectorAll('[name = \"dia\"]');\r\n        const inputHiddenDia = document.querySelector('[name = \"dia_id\"]');\r\n        const inputHiddenHora = document.querySelector('[name = \"hora_id\"]');\r\n\r\n        categoria.addEventListener('change',terminoBusqueda);\r\n        dias.forEach(dia => dia.addEventListener('change',terminoBusqueda));\r\n\r\n        let busqueda = {\r\n            categoria_id: '',\r\n            dia: '',\r\n        }\r\n\r\n        function terminoBusqueda(e) {\r\n            busqueda[ e.target.name ] = e.target.value;\r\n\r\n            // Reiniciar los campos ocultos y el selector de horas\r\n            inputHiddenHora.value = '';\r\n            inputHiddenDia.value = '';\r\n\r\n\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n            if (horaPrevia) {\r\n                horaPrevia.classList.remove('horas__hora--seleccionada')\r\n            }\r\n\r\n            // Verificar que el objeto esté completo para poder consultar la API\r\n            if (Object.values(busqueda).includes('')) { return; } else { buscarEventos(); }\r\n        }\r\n\r\n        async function buscarEventos() {\r\n            //Aplicamos destrucuring a la variable de busqueda, la cual contiene los valores de dia y categoria\r\n            const { dia,categoria_id } = busqueda;\r\n\r\n            // Creamos una URL que se asocie de manera dinámica a cada evento registtrado\r\n            const url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`;\r\n\r\n            const resultado = await fetch(url);\r\n            const eventos = await resultado.json();\r\n            obtenerHorasDisponibles(eventos); // Pasamos el parámetro eventos a la función\r\n        }\r\n\r\n        function obtenerHorasDisponibles(eventos) {\r\n\r\n            // Reiniciar las horas\r\n            const listadoHoras = document.querySelectorAll('#horas li');\r\n            listadoHoras.forEach(li => li.classList.add('horas__hora--deshabilitada'));\r\n\r\n            // Comprobar eventos ya tomados, y quitar la variable de deshabilitados\r\n            horasTomadas = eventos.map(evento => evento.hora_id);\r\n\r\n            const listadoHorasArray = Array.from(listadoHoras); // Listadohoras es un NodeList, para poder usar la función filter debemos convertirlo en un arreglo ya esta función solo está diseñada para arreglos y no para NodeList\r\n\r\n            const resultado = listadoHorasArray.filter(li => !horasTomadas.includes(li.dataset.horaId));\r\n            resultado.forEach(li => li.classList.remove('horas__hora--deshabilitada'));\r\n\r\n            const HorasDisponibles = document.querySelectorAll('#horas li:not(.horas__hora--deshabilitada)');\r\n\r\n            HorasDisponibles.forEach(hora => hora.addEventListener('click',seleccionarHora));\r\n        }\r\n\r\n        function seleccionarHora(e) {\r\n\r\n            // Desahbilitar la hora previa si hay un nuevo click\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n            if (horaPrevia) {\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n\r\n            // agregar la clase para resaltar la opción seleccionada\r\n            e.target.classList.add('horas__hora--seleccionada');\r\n\r\n            inputHiddenHora.value = e.target.dataset.horaId;\r\n\r\n            // Llenar el campo oculto de día\r\n            inputHiddenDia.value = document.querySelector('[name=\"dia\"]:checked').value;\r\n\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n\r\n    const ponentesInput = document.querySelector('#ponentes');\r\n\r\n    if (ponentesInput) {\r\n        let ponentes = [];\r\n        let ponentesFiltrados = [];\r\n        const listadoPonentes = document.querySelector('#listado-ponentes');\r\n        const ponenteHidden = document.querySelector('[name=\"ponente_id\"]');\r\n\r\n        obtenerPonentes();\r\n\r\n        // Escuchar por el evento de escritura en el input\r\n        ponentesInput.addEventListener('input',buscarPonentes);\r\n\r\n        async function obtenerPonentes() {\r\n            // Asignamos una URL para hacer el llamado de la API\r\n            const url = `/api/ponentes`;\r\n\r\n            const respuesta = await fetch(url);\r\n            const resultado = await respuesta.json();\r\n\r\n            formatearPonentes(resultado);\r\n        }\r\n\r\n        function formatearPonentes(arrayPonentes = []) {\r\n            ponentes = arrayPonentes.map(ponente => {\r\n                return {\r\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,\r\n                    id: ponente.id\r\n                }\r\n            })\r\n        }\r\n\r\n        function buscarPonentes(e) {\r\n            const busqueda = e.target.value;\r\n\r\n            if (busqueda.length > 3) {\r\n                // Esta expresión regular permite realizar una búsqueda indistintamente de que la palabra esté escrita en mayúsculas o minúsculas\r\n                const expresion = new RegExp(busqueda,\"i\");\r\n                ponentesFiltrados = ponentes.filter(ponente => {\r\n\r\n                    if (ponente.nombre.toLowerCase().search(expresion) != -1) {\r\n                        return ponente;\r\n                    }\r\n                })\r\n            } else { ponentesFiltrados = []; }\r\n\r\n            mostrarPonentes();\r\n        }\r\n\r\n        function mostrarPonentes() {\r\n\r\n\r\n            // limpiar el renderizado de la búsqueda para evitar que se repitan las búsquedas\r\n            // listadoPonentes.innerHTML = '';\r\n            while (listadoPonentes.firstChild) {\r\n                listadoPonentes.removeChild(listadoPonentes.firstChild);\r\n            }\r\n\r\n            if (ponentesFiltrados.length > 0) {\r\n                ponentesFiltrados.forEach(ponente => {\r\n                    const ponenteHTML = document.createElement('LI');\r\n                    ponenteHTML.classList.add('listado-ponentes__ponente');\r\n                    ponenteHTML.textContent = ponente.nombre;\r\n                    ponenteHTML.dataset.ponenteId = ponente.id;\r\n                    ponenteHTML.onclick = seleccionarPonente;\r\n\r\n                    // Añadir el elemento al DOM\r\n                    listadoPonentes.appendChild(ponenteHTML);\r\n                })\r\n            } else {\r\n                const noResultados = document.createElement('P');\r\n                noResultados.classList.add('listado-ponentes__no.resultado');\r\n                noResultados.textContent = 'No hay resultados para tu búsqueda';\r\n                // Añadir el elemento al DOM\r\n                listadoPonentes.appendChild(noResultados);\r\n            }\r\n        }\r\n\r\n        function seleccionarPonente(e) {\r\n            const ponente = e.target;\r\n\r\n            // Remover la clase previa\r\n            const ponentePrevio = document.querySelector('.listado-ponentes__ponente--seleccionado');\r\n            if (ponentePrevio) { ponentePrevio.classList.remove('listado-ponentes__ponente--seleccionado'); }\r\n\r\n\r\n            ponente.classList.add('listado-ponentes__ponente--seleccionado');\r\n\r\n            // Asignamos el valor de la selección al input oculto\r\n            ponenteHidden.value = ponente.dataset.ponenteId;\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n\r\n    const tagsInput = document.querySelector('#tags_input');\r\n\r\n    if (tagsInput) {\r\n\r\n        let tagsDiv = document.querySelector('#tags');\r\n        let tagsInputHidden = document.querySelector('[name=\"tags\"]');\r\n        let tags = [];\r\n\r\n        // Recuperar del input oculto\r\n        if (tagsInputHidden.value != '') {\r\n            tags = tagsInputHidden.value.split(',');\r\n            mostrarTags();\r\n        }\r\n\r\n        //Escuchar los cambios en el input\r\n        tagsInput.addEventListener('keypress',guardarTag);\r\n\r\n        function guardarTag(e) {\r\n\r\n            if (e.keyCode === 44) {\r\n\r\n                //Evita campos vacíos\r\n                if (e.target.value.trim() === '' || e.target.value <= 1) { return }\r\n\r\n                // Guardar los Tags\r\n                e.preventDefault();\r\n                tags = [ ...tags,e.target.value.trim() ];\r\n                tagsInput.value = '';\r\n\r\n                mostrarTags();\r\n            }\r\n        }\r\n\r\n        function mostrarTags() {\r\n            tagsDiv.textContent = '';\r\n            tags.forEach(tag => {\r\n                const etiqueta = document.createElement('LI');\r\n                etiqueta.classList.add('formulario__tag');\r\n                etiqueta.textContent = tag;\r\n                etiqueta.ondblclick = eliminarTag;\r\n                tagsDiv.appendChild(etiqueta);\r\n            })\r\n            actualizarInputHidden();\r\n        }\r\n\r\n        function eliminarTag(e) {\r\n            e.target.remove();\r\n            tags = tags.filter(tag => tag !== e.target.textContent);\r\n            actualizarInputHidden();\r\n        }\r\n\r\n        function actualizarInputHidden() {\r\n            tagsInputHidden.value = tags.toString();\r\n        }\r\n    }\r\n})()  // IIFE\r\n"]}